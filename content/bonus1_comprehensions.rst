Бонус 1: базовые структуры данных и работа с ними
#################################################

:date: 2019-10-03 17:05
:summary: Листы, туплы, словари, множества. Comprehensions.
:status: draft

.. default-role:: code
.. contents:: Содержание


Структуры данных
================

Структура данных -- это любая штука, которая 1) хранит данные и 2) предоставляет интерфейс для работы с ними. Мы сегодня рассмотрим самые базовые структуры данных в питоне: list, tuple, dict и set.

В этом семинаре будет большое количество примеров кода. Попытайтесь повторить его самостоятельно, попробуйте что-нибудь изменить. Грамотное использование синтаксиса и структур приходит только с опытом.

Теория 1. List
---------------

List -- это массив элементов. Пример:

.. code-block:: python
    >>> list1 = [1, 2.5, 3, 'a', [1, 'cde']]
    >>> list1[0]
    1
    >>> list1[1]
    2.5
    >>> list1[4]
    [1, 'cde']
    >>> list1[4][0]
    0

На этом примере можно увидеть несколько свойств листа:

    * Лист можно создать, перечислив в квадратных скобках его элементы. Если написать просто [], то будет пустой лист.
    * В листе могут храниться элементы разных типов: целые числа, нецелые, строки, другие массивы... В реальном коде так делать крайне нежелательно, но важно понимать, что питон вам не помешает запихнуть что угодно внутрь вашего листа
    * К элементам массива можно обращаться через квадратные скобки с индексом элемента. Индексы начинаются с нуля.
    * Если есть вложенные массивы, можно писать несколько квадратных скобок подряд, типа [4][0].

.. code-block:: python
    >>> list1[-1]
    [1, 'cde']
    >>> list1[-2]
    'a'
    >>> list1[2:4]
    [3, 'a']
    >>> list1[:4]
    [1, 2.5, 3, 'a']
    >>> list1[3:]
    ['a', [1, 'cde']]
    >>> len(list1)
    5

 Тут есть немного магии.
 
    * В качестве индекса можно написать отрицательный элемент, и питон найдёт соответствующий элемент с *конца* массива. -1 -- первый элемент с конца, -2 -- второй элемент с конца, и так далее.
    * Slicing. Внутри квадратных скобок можно указать два индекса через двоеточие. Результатом будет "кусок" массива -- другой массив, в который включены все элементы от первого индекса включительно до второго НЕ включительно. Смотрите внимательно примеры.
    * Если внутри квадратных скобок стоит двоеточие, один (или оба) индекса вокруг него можно не писать. Если нет первого индекса, типа [:4], то результатом будет кусок массива с начала до элемента с индексом 4 - 1. Если нет второго, типа [2:], то результатом будет кусок массива со второго элемента до конца массива. Если нет ни одного индекса, [:], то результатом будет копия исходного массива.
    * Длину массива можно посмотреть функцией len()

.. code-block:: python
    >>> list2 = list(range(5))
    >>> list2
    [0, 1, 2, 3, 4]
    >>> list2.append(10)
    >>> list2
    [0, 1, 2, 3, 4, 10]
    >>> list2[1] = 5
    >>> list2
    [0, 5, 2, 3, 4, 10]
    >>> list2.remove(5)
    >>> list2
    [0, 2, 3, 4, 10]
    >>> list2.pop(1)
    2
    >>> list2
    [0, 3, 4, 10]
    >>> list2.pop()
    10
    >>> list2
    [0, 3, 4]
    >>> list2.insert(1, 42)
    >>> list2
    [1, 42, 3, 4]

Тут перечислены основные способы изменить массив (и один способ его создать).

    * range(n) возвращает массив чисел от 0 до n. (На самом деле, не массив, поэтому вокруг range приходится писать list, но это не тема семинара)
    * Если нужно изменить элемент массива, к нему можно обратиться через квадратные скобки и чему-то приравнять.
    * .append(elem) добавляет elem в конец массива.
    * .insert(index, elem) добавляет elem по индексу index, сдвигая мешающие элементы направо.
    * .remove(elem) убирает самый левый элемент elem
    * .pop(index) убирает элемент по индексу index. Если индекс не написать, .pop() уберёт самый правый элемент массива.

Упражнение 1. Простые числа
---------------------------

Создайте пустой массив, в который будете записывать простые числа. Для чисел от 2 до 1000 сделайте: если число не делится ни на одно из чисел в массиве простых чисел, добавьте его в массив простых чисел. Выведите результат и проверьте, что там действительно только простые числа.

Упражнение 2. Сортировка выбором
--------------------------------

Напишите функцию, которая делает сортировку выбором. Если не знаете, что это, вики в помощь.
PS: Чтобы поменять местами два элемента массива в питоне достаточно написать
.. code-block:: python
    lst[index1], lst[index2] = lst[index2], lst[index1]


Теория 2. Tuple
---------------

Tuple -- это неизменяемый массив.

.. code-block:: python
    >>> tpl = (1, 2, 3)
    >>> tpl[1]
    2
    >>> tpl[1] = 5
    TypeError: 'tuple' object does not support item assignment
    >>> tpl.append(1)
    AttributeError: 'tuple' object has no attribute 'append'

Буквально, с туплом нельзя ничего сделать. Нельзя добавить элементы, нельзя удалить элементы, нельзя изменить существующие элементы.
Туплы используют тогда, когда элементы массива разнородны и не должны меняться внутри программы.
Листы используют тогда, когда элементы массива однородны и могут меняться внутри программы.

Например, набор точек на плоскости должен быть записан в лист -- все точки имеют одинаковый смысл, а набор может меняться. А вот сами точки должны быть туплами: они состоят из двух координат, х и у, которые принципиально различны. У точки не может внутри программы отрасти третья компонента, все точки на плоскости; из точки нельзя удалить одну из компонент так, что результат будет точкой.
Аналогичный пример -- это rgb кодировка цвета. Её нужно представить туплом, потому что компоненты массива несут разный смысл (интенсивность конкретного цвета), и меняться тупл толком не может.

Упражнение 3. Вращение квадрата
-------------------------------

Напишите функцию rotate_square(square, angle), которая принимает координаты вершин квадрата в виде листа туплов, вращает квадрат на угол angle относительно его центра и возращает координаты повёрнутого квадрата (тоже листом туплов).

Теория 3. Dict
--------------

Dict, dictionary или словарь -- "отображение" одних элементов в другие. Проще всего воспринимать как словарь: есть какое-то понятие и соответствующее ему перевод/пояснение. Понятие называется ключом, перевод называется значением. То есть, словарь может получить ключ и сказать, какое значение ему соответствует.
Если вы ничего не поняли, это не страшно, смотрите пример:

.. code-block:: python
    >>> dct = {'key': 'value', 'a': 'b', 1: 2}
    >>> dct['key']
    'value'
    >>> dct[1]
    2
    >>> dct['a']
    'b'
    >>> dct[1] = 'blah'
    >>> dct
    {'key': 'value', 'a': 'b', 1: 'blah'}
    >>> dct['value']
    KeyError: 'value'
    >>> dct['python'] = 'is awesome'
    >>> dct
    {'key': 'value', 'a': 'b', 1: 'blah', 'python': 'is awesome'}
    >>> for key in dct:
    >>>     print(key, dct[key])
    key value
    a b
    1 blah
    python is awesome

Здесь важно забыть про массивы и их индексы. Есть только ключи и соответствующие им значения.
    * Словарь можно задать через фигурные скобки, внутри которых через запятую перечислены пары ключ: значение
    * По ключам можно находить и изменять значения
    * Если написать for key in dct:, то key будет пробегать массив ключей этого словаря

Упражнение 4. Доступные товары
------------------------------

Напишите функцию, которая принимает на вход словарь типа {товар: цена} и одно число -- доступное бабло, а отдаёт список товаров, хотя бы один экземпляр которых можно купить на это бабло.
Например, аргументы функции {'banana': 10, 'apple': 5, 'steak': 100} и 50, тогда возращаемое значение -- ['banana', 'apple']

Теория 4. Set
-------------

Set -- это "множество", набор уникальных элементов. В отличие от массива, у элементов множества нет индексов, хотя по нему всё ещё можно пройтись циклом

.. code-block:: python
    >>> lst = [1, 1, 2, 3, 4, 5, 5, 5, 5]
    >>> set1 = set(lst)
    >>> set1
    {1, 2, 3, 4, 5}
    >>> set1.add(7)
    >>> set1
    {1, 2, 3, 4, 5, 7}
    >>> set1.add(3)
    >>> set1
    {1, 2, 3, 4, 5, 7}
    >>> set1[1]
    TypeError: 'set' object does not support indexing
    >>> list(set1)
    [1, 2, 3, 4, 5, 7]

Видно, что множество поддерживает уникальность значений в себе, может быть сделано из листа, может быть превращено в лист.

Упражнение 5. Удаление дублей
-----------------------------

Напишите функцию, которая принимает лист с повторяющимися элементами и возвращает лист с уникальными элементами (теми же, что были в первом массиве).

Упражнение 6. Разность массивов
-------------------------------

Напишите функцию, которая принимает на вход два массива и возвращает массив с теми элементами, которые были в первом массиве, но не во втором. Можно считать, что в исходных массивах все элементы уникальны.
PS: погуглите разность множеств, это довольно распространённая операция
